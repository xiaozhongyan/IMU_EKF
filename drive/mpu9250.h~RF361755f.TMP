

#ifndef MPU9250_H_
#define MPU9250_H_

#include "sys.h"
#include "led.h"

typedef enum {Error = 0, Success = !Error } Status;

//定义IMU引脚
#define IMU_GPIOx					GPIOB
#define IMU_SCL_Pin				GPIO_Pin_6
#define IMU_SDA_Pin				GPIO_Pin_7
#define IMU_FSYNC_GPIOx		GPIOA
#define IMU_FSYNC					GPIO_Pin_12
//定义管脚信号
#define IMU_SCL_H         ((IMU_GPIOx->BSRR) = IMU_SCL_Pin)
#define IMU_SCL_L         ((IMU_GPIOx->BRR)  = IMU_SCL_Pin)  
#define IMU_SDA_H         ((IMU_GPIOx->BSRR) = IMU_SDA_Pin)
#define IMU_SDA_L         ((IMU_GPIOx->BRR)  = IMU_SDA_Pin)
#define IMU_SCL_read      ((IMU_GPIOx->IDR)  & IMU_SCL_Pin)
#define IMU_SDA_read      ((IMU_GPIOx->IDR)  & IMU_SDA_Pin)
//定义设备地址
#define	IMU_GYR_ADDRESS   (0x68<<1)
//#define IMU_MAG_ADDRESS   (0x48<<1)
#define IMU_MAG_ADDRESS   0x18
#define IMU_ACC_ADDRESS   (0x68<<1)

//定义MPU9250寄存器地址:ACC GYRO
//****************************************
#define SELF_TEST_X_GYRO	0X00
#define SELF_TEST_Y_GYRO	0X01
#define SELF_TEST_Z_GYRO	0X02
#define SELF_TEST_X_ACCE	0X0D
#define SELF_TEST_Y_ACCE	0X0E
#define SELF_TEST_Z_ACCE	0X0F

#define XG_OFFSET_H				0X13
#define XG_OFFSET_L				0X14
#define YG_OFFSET_H				0X15
#define YG_OFFSET_L				0X16
#define ZG_OFFSET_H				0X17
#define ZG_OFFSET_L				0X18

#define	SMPLRT_DIV		   			0X19
#define	CONFIG						0X1A
		#define DLPF_CFG_250hz				0X00
		#define DLPF_CFG_184hz				0X01
		#define DLPF_CFG_98hz				0X02
		#define DLPF_CFG_41hz 				0X03
		#define DLPF_CFG_20hz		  		0X04
		#define DLPF_CFG_10hz	 	  		0X05
		#define DLPF_CFG_5hz  				0X06
		#define DLPF_CFG_360hz				0X07
#define	GYRO_CONFIG					0X1B
		#define GX_SELF_TEST_EN		0X80
		#define GY_SELF_TEST_EN		0X40
		#define GZ_SELF_TEST_EN		0X20
		#define A_SELF_TEST_DIS		0X00
		#define GYRO_SCALE_250		0X00
		#define GYRO_SCALE_500		0X08
		#define GYRO_SCALE_1000	  	0X10
		#define GYRO_SCALE_2000	  	0X18
		#define FCHOICE_X0				0X00
		#define FCHOICE_01				0X01
		#define FCHOICE_11				0X03
#define	ACCEL_CONFIG		0X1C
		#define AX_SELF_TEST_EN		0X80 //X ACCEL SELF TEST ENABLE
		#define AY_SELF_TEST_EN		0X40 //Y ACCEL SELF TEST ENABLE
		#define AZ_SELF_TEST_EN		0X20 //Z ACCEL SELF TEST ENABLE
		#define A_SELF_TEST_DIS		0X00 // ACCEL SELF TEST DISABLE
		#define ACCEL_SCALE_2		0X00 //ACCEL FULL SCALE 2G
		#define ACCEL_SCALE_4		0X08 //ACCEL FULL SCALE 4G
		#define ACCEL_SCALE_8		0X10 //ACCEL FULL SCALE 4G
		#define ACCEL_SCALE_16		0X18 //ACCEL FULL SCALE 16G
#define	ACCEL_CONFIG_2		0x1D
		#define ACCEL_FCHOICE	(1<<3)
		#define A_DLPF_CFG_250hz				0X00
		#define A_DLPF_CFG_218hz				0X01
		#define A_DLPF_CFG_98hz					0X02
		#define A_DLPF_CFG_41hz 				0X03
		#define A_DLPF_CFG_20hz		  			0X04
		#define A_DLPF_CFG_10hz	 	  			0X05
		#define A_DLPF_CFG_5hz  				0X06
		#define A_DLPF_CFG_420hz				0X07
#define LP_ACCEL_ODR			0X1E //the low power accel output data rate

#define WOM_THR 				0X1F //wake on motion threshold 
#define FIFO_EN					0X23 
#define I2C_MST_CTRL			0X24

#define I2C_SLV0_ADDR			0X25
#define I2C_SLV0_REG			0X26
#define I2C_SLV0_CTRL			0X27
//SLV1
#define I2C_SLV1_ADDR			0X28
#define I2C_SLV1_REG			0X29
#define I2C_SLV1_CTRL			0X2A

#define I2C_SLV2_ADDR			0X2B
#define I2C_SLV2_REG			0X2C
#define I2C_SLV2_CTRL			0X2D

#define I2C_SLV3_ADDR			0X2E
#define I2C_SLV3_REG			0X2F
#define I2C_SLV3_CTRL			0X30

#define I2C_SLV4_ADDR			0X31
#define I2C_SLV4_REG			0X32
#define I2C_SLV4_DO 			0X33
#define I2C_SLV4_CTRL			0X34
#define I2C_SLV4_DI 			0X35
#define I2C_MST_STATUS 			0X36
#define INT_PIN_CFG 			0X37
#define INT_ENABLE	 			0X38
#define INT_STATUS	 			0X3A
#define ACCEL_OUT				0X3B
#define	ACCEL_XOUT_H			0X3B
#define	ACCEL_XOUT_L			0X3C
#define	ACCEL_YOUT_H			0X3D
#define	ACCEL_YOUT_L			0X3E
#define	ACCEL_ZOUT_H			0X3F
#define	ACCEL_ZOUT_L			0X40

#define	TEMP_OUT_H				0x41
#define	TEMP_OUT_L				0x42
#define GYRO_OUT          		0x43
#define	GYRO_XOUT_H				0x43
#define	GYRO_XOUT_L				0x44
#define	GYRO_YOUT_H				0x45
#define	GYRO_YOUT_L				0x46
#define	GYRO_ZOUT_H				0x47
#define	GYRO_ZOUT_L				0x48

#define EXT_SENS_DATA_00	0X49
#define EXT_SENS_DATA_01	0X4A
#define EXT_SENS_DATA_02	0X4B
#define EXT_SENS_DATA_03	0X4C
#define EXT_SENS_DATA_04	0X4D
#define EXT_SENS_DATA_05	0X4E
#define EXT_SENS_DATA_06	0X4F
#define EXT_SENS_DATA_07	0X50
#define EXT_SENS_DATA_08	0X51
#define EXT_SENS_DATA_09	0X52
#define EXT_SENS_DATA_10	0X53
#define EXT_SENS_DATA_11	0X54
#define EXT_SENS_DATA_12	0X55
#define EXT_SENS_DATA_13	0X56
#define EXT_SENS_DATA_14	0X57
#define EXT_SENS_DATA_15	0X58
#define EXT_SENS_DATA_16	0X59
#define EXT_SENS_DATA_17	0X5A
#define EXT_SENS_DATA_18	0X5B
#define EXT_SENS_DATA_19	0X5C
#define EXT_SENS_DATA_20	0X5D
#define EXT_SENS_DATA_21	0X5E
#define EXT_SENS_DATA_22	0X5F
#define EXT_SENS_DATA_23	0X60

#define I2C_SLV0_DO 			0X63
#define I2C_SLV1_DO 			0X64
#define I2C_SLV2_DO 			0X65
#define I2C_SLV3_DO 			0X66

#define I2C_MST_DELAY_CTRL 0X67
#define SIGNAL_PATH_RESET 0X68
#define MOT_DETECT_CTRL   0X69
#define USER_CTRL				  0X6A
//PWR_MGMT: [7]reset [6]sleep [5]cycle [4]gyro_standby [3]power down internal ptat [2:0]clk select
#define	PWR_MGMT_1				0x6B 
#define PWR_MGMT_2				0x6C //	 power management 2: control accel and gro disable or on

#define FIFO_COUNTH			  0X72
#define FIFO_COUNTL			  0X73
#define FIFO_R_W				  0X74
#define	WHO_AM_I		  		0x75

#define XA_OFFSET_H				0X77
#define XA_OFFSET_L				0X78

#define YA_OFFSET_H				0X7A
#define YA_OFFSET_L				0X7B

#define ZA_OFFSET_H				0X7D
#define ZA_OFFSET_L				0X7E
//MAG
#define MAG_XOUT_L				0x03
#define MAG_XOUT_H				0x04
#define MAG_YOUT_L				0x05
#define MAG_YOUT_H				0x06
#define MAG_ZOUT_L				0x07
#define MAG_ZOUT_H				0x08
#define MAG_WIA						0X00
#define MAG_INFO					0x01
#define MAG_ST1						0X02
#define MAG_ST2						0X09
#define MAG_CRTL1					0X0A
#define MAG_CRTL2					0X0B
#define MAG_ASAX					0X10
#define MAG_ASAY					0X11
#define MAG_ASAZ					0X12
typedef enum{
		MAG_PW_DOWN_MODE			=0,
		MAG_SINGLE_MODE				=1,
		MAG_CONTINU1_MODE			=2,
		MAG_CONTINU2_MODE			=6,
		MAG_EX_TRIG_MODE			=4,
		MAG_SELF_TEST_MODE		=8,
		MAG_FUSE_MODE					=0XF,
}MAG_CONTROL1;

//typedef enum{
//	IMU_FILTER_256HZ_NOLPF2=0,
//	IMU_FILTER_188HZ,
//	IMU_FILTER_98HZ,
//	IMU_FILTER_42HZ,
//	IMU_FILTER_20HZ,
//	IMU_FILTER_10HZ,
//	IMU_FILTER_5HZ,
//	IMU_FILTER_2100HZ_NOLPF=0,
//	NUM_FILTER
//}IMU_LPF;

typedef enum{
	GYRO_SCALE_250DPS	=0,
	GYRO_SCALE_500DPS	=(1<<3),
	GYRO_SCALE_1000DPS	=(2<<3),
	GYRO_SCALE_2000DPS	=(3<<3),
}GYRO_SCALE_TYPE;

typedef enum{
	ACCEL_SCALE_2G		=0,
	ACCEL_SCALE_4G		=(1<<3),
	ACCEL_SCALE_8G		=(2<<3),
	ACCEL_SCALE_16G     =(3<<3)
}ACCEL_SCALE_TYPE;

typedef enum{
	GYRO_RST			=(1<<2),
	ACCEL_RST			=(1<<1),
	TEMP_RST			=1
} SG_PATH_RESET;

typedef enum{
		ACCEL_INT_EN				=(1<<7),
		ACCEL_INT_MODE_CMP	=(1<<6)
}ACCEL_INT_CTRL;

typedef enum{
	INT_ACTIVE_LOW			=(1<<7),
	INT_OPEN_DRAIN			=(1<<6),
	INT_LATCH_EN			=(1<<5),
	INT_ANY_RD_CL			=(1<<4),
	INT_FSYNC_ACTIVE_LOW	=(1<<3),
	INT_FSYNC_MODE_EN		=(1<<2),
	BYPASS_EN				=(1<<1),
	INT_NONE				=0
}INT_PIN_BYPASS_CFG;

typedef enum{
	INT_WOM_EN			=(1<<6),
	INT_FIFO_OV_EN		=(1<<4),
	INT_FSYNC_EN		=(1<<3),
	INT_RAW_RDY_EN		=1,
	INT_DISABLE_ALL		=0
}INT_EN;

typedef enum{
	TEMP_FIFO_OUT		=(1<<7),
	GYRO_FIFO_XOUT		=(1<<6),
	GYRO_FIFO_YOUT		=(1<<5),
	GYRO_FIFO_ZOUT		=(1<<4),
	ACCEL_FIFO_OUT		=(1<<3),
	SLV2_FIFO_OUT		=(1<<2),
	SLV1_FIFO_OUT		=(1<<1),
	SLV0_FIFO_OUT		=1,
	FIFO_DISABLE_ALL	=0
}FIFO_ENABLE;

typedef enum{
	MULT_MST_EN			=(1<<7),
	WAIT_FOR_ES			=(1<<6),
	SLV3_FIFO_EN		=(1<<5),
	I2C_MST_NSR			=(1<<4),
	I2C_MST_CLK_348KHZ	=0,
	I2C_MST_CLK_333KHZ	=1,
	I2C_MST_CLK_320KHZ	=2,
	I2C_MST_CLK_308KHZ	=3,
	I2C_MST_CLK_296KHZ	=4,
	I2C_MST_CLK_286KHZ	=5,
	I2C_MST_CLK_276KHZ	=6,
	I2C_MST_CLK_267KHZ	=7,
	I2C_MST_CLK_258KHZ	=8,
	I2C_MST_CLK_500KHZ	=9,
	I2C_MST_CLK_471KHZ	=10,
	I2C_MST_CLK_444KHZ	=11,
	I2C_MST_CLK_421KHZ	=12,
	I2C_MST_CLK_400KHZ	=13,
	I2C_MST_CLK_381KHZ	=14,
	I2C_MST_CLK_364KHZ	=15,
}I2C_MASTER_CRT;

typedef enum{
	//Enable fifo operation mode
	IMU_FIFO_ENA     		=(1<<6),
	//enable the I2C master interface module(ES_DA,ES_SCL)
	IMU_I2C_MSTEN			=(1<<5),
	IMU_I2C_MSTDISEN		=0,
	//disable I2C Slave module and put the seial interface in SPI MODE
	IMU_I2C_IF_DIS			=(1<<4),
	IMU_FIFO_RST			=(1<<2),
	IMU_I2C_MST_RST			=(1<<1),
	//reset all gyro and digital signal path
	IMU_SIG_COND_RST		=1
}USER_CONTROL;

typedef enum{
		IMU_DISABLE_XA			=(1<<5),
		IMU_DISABLE_YA			=(1<<4),
		IMU_DISABLE_ZA			=(1<<3),
		IMU_DISABLE_XG			=(1<<2),
		IMU_DISABLE_YG			=(1<<1),
		IMU_DISABLE_ZG			=1,
		IMU_DISABLE_NONE		=0
}POWER_MANAGEMENT_2;

typedef enum{
	IMU_H_Reset			     	=(1<<7),
	IMU_SLEEP					=(1<<6),
	IMU_GYRO_STANDBY			=(1<<5),
	IMU_PD_PTAT					=(1<<4),
	IMU_CLKSEL_INTERNAL			=0,
	IMU_CLKSEL_AUTO				=1
}POWER_MANAGEMENT_1;

typedef enum{
	IMU_BIT_14					=(1<<4),
	IMU_BIT_16					=(0<<4),
	MODE_POWER_DOWN				=0,
	MODE_POWER_SINGLE			=1,
	MODE_CONTINUOUS_M1			=2,
	MODE_CONTINUOUS_M2			=6,
	MODE_EX_TRIGGER				=8,
	MODE_FUSE_ROM				=0XF
}CNTL1;

typedef struct{
	uint8_t Power_Management_1;
	uint8_t Disable_Dev;
}IMU_InitTypeDef;

void MPU9250_Init(void);
void Calibrate_MPU9250();
void READ_MPU9250_ACCEL(float * acc_buf);
void READ_MPU9250_GYRO(float * gyro_buf);
void READ_MPU9250_MAG(float * mag_buf);
void READ_MPU9250_REG(uint8_t * reg_data);
//int read_imu();

#endif
